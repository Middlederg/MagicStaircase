<button class="w-16 h-24 md:w-24 md:h-32 lg:w-32 lg:h-44 xl:w-40 xl:h-60
     bg-white border-2 border-green-700 rounded-lg
     flex flex-col items-center justify-around
        outline-none focus:outline-none
      @(Fits() ? "hover:shadow-lg" : "")" @onclick="PileClicked">

    <span class="text-xl md:text-3xl lg:text-4xl xl:text-5xl font-mono font-bold">
        @InnerPile.LastCard.Number
    </span>

    <span>
        <svg class="w-8 h-8 md:w-12 md:h-12 lg:w-16 lg:h-16 xl:w-20 xl:h-20" fill="none" stroke="currentColor" viewBox="0 0 24 24" xmlns="http://www.w3.org/2000/svg">

            @if (InnerPile.Direction == Core.Direction.Up)
            {
                <path stroke-linecap="round" stroke-linejoin="round" stroke-width="2" d="M5 10l7-7m0 0l7 7m-7-7v18">
                </path>

            }
            else
            {
                <path stroke-linecap="round" stroke-linejoin="round" stroke-width="2" d="M19 14l-7 7m0 0l-7-7m7 7V3">
                </path>
            }
        </svg>
    </span>
    <span>
        @*@if (!string.IsNullOrWhiteSpace(info))
        {
            <span class="flex items-center bg-red-500 border-l-4 border-red-700 py-2 px-3 shadow-md mb-2">
                @info
            </span>
        }*@
    </span>
</button>

@code {

    [Parameter]
    public Core.Pile InnerPile { get; set; }

    [CascadingParameter]
    Core.Game Game { get; set; }

    [CascadingParameter]
    Core.Card SelectedCard { get; set; }

    [Parameter]
    public EventCallback<Core.Card> OnCardPlaced { get; set; }

    private bool Fits() => SelectedCard != null && InnerPile.Fits(SelectedCard);

    private async Task PileClicked()
    {
        if (Fits())
        {
            Game.Play(SelectedCard.Number, InnerPile.Index);
            await OnCardPlaced.InvokeAsync(SelectedCard);
        }
    }
}
