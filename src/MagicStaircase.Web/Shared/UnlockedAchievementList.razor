@inject Core.IScoreReporitory repository

@if (achievementList != null && achievementList.Any())
{
    <div class="border rounded border-green-700">
        <div class="p-2 text-center text-white border-b bg-green-700 font-semibold">
            @achievementsHeader
        </div>
        <div class="p-4 grid grid-cols-1 md:grid-cols-2 gap-2">
            @foreach (var achievement in achievementList)
            {
                <Achievement InnerAchievement="achievement" UnlockerScores="new List<Core.Score>() { score }" />
            }
        </div>
    </div>
}
@code {

    private string achievementsHeader = "No achievements unlocked";

    private List<Core.Achievement> achievementList;

    private Core.Score score;

    protected override void OnInitialized()
    {
        achievementList = new List<Core.Achievement>();
    }

    public async Task Show(Core.Score score)
    {
        this.score = score;
        foreach (var achievement in await GetAvaliableAchievements())
        {
            if (achievement.TryToUnlockAchievement(score))
            {
                achievementsHeader = "Achievements unlocked!";
                achievementList.Add(achievement);
            }
        }
        StateHasChanged();
        await repository.AddScore(score);
    }

    private async Task<IEnumerable<Core.Achievement>> GetAvaliableAchievements()
    {
        var scores = await repository.GetScores();
        var achievements = new List<Core.Achievement>();
        foreach (var achievement in Core.AchievementFactory.Achievements)
        {
            if (!scores.Any(x => achievement.TryToUnlockAchievement(x)))
            {
                achievements.Add(achievement);
            }
        }
        return achievements;
    }

}
