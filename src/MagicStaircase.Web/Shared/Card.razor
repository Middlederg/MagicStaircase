<button class="w-16 h-24 md:w-24 md:h-32 lg:w-32 lg:h-44 xl:w-40 xl:h-60
        @(selected ? "outline-black focus:outline-black" : "outline-none focus:outline-none")
      border-2 border-green-700 rounded-lg hover:shadow-lg flex items-center justify-center
        @(canBePlaced ? "bg-white text-green-900" : "bg-red-50 text-red-500")"
        @onclick="CardSelected" title="@(!canBePlaced ? CanNotBePlacedLiteral : "")">
    <span class="text-3xl sm:text-4xl md:text-5xl lg:text-7xl font-mono font-bold">
        @InnerCard.Number
    </span>
</button>

@code {
    private const string CanNotBePlacedLiteral = "This card can not be placed :(";
    private bool selected = false;
    private bool canBePlaced => Game.CardCanBePlaced(InnerCard);

    [Parameter]
    public Core.Card InnerCard { get; set; }

    [CascadingParameter]
    public Core.Game Game { get; set; }

    [Parameter]
    public EventCallback<Core.Card> OnCardSelected { get; set; }

    private string info;

    private async Task CardSelected()
    {
        if (Game.CardCanBePlaced(InnerCard))
        {
            await OnCardSelected.InvokeAsync(InnerCard);
        }
    }

    public void Update(Core.Card selectedCard)
    {
        selected = selectedCard != null && selectedCard.Equals(InnerCard);
    }

}
